From e88e72e77e4a770dd94770ac85f6eace6858e85f Mon Sep 17 00:00:00 2001
From: Harald Hoyer <harald@redhat.com>
Date: Tue, 20 Sep 2011 20:43:19 +0200
Subject: [PATCH] network: allow multiple ip autoconf options

it should now be able to configure IPv6 autoconfiguration and run a IPv4
dhcp client "ip=eth0:auto6,dhcp"
---
 modules.d/40network/dhclient-script  | 21 +++++++-------
 modules.d/40network/ifup             | 53 +++++++++++++++++++++---------------
 modules.d/40network/net-genrules.sh  |  6 ++--
 modules.d/40network/netroot          | 26 ++++++------------
 modules.d/40network/parse-ip-opts.sh | 44 +++++++++++++++++-------------
 modules.d/99base/init                |  2 +-
 test/TEST-50-MULTINIC/test.sh        | 12 +++++++-
 7 files changed, 90 insertions(+), 74 deletions(-)

diff --git a/modules.d/40network/dhclient-script b/modules.d/40network/dhclient-script
index 1f5c4c0..8ec1323 100755
--- a/modules.d/40network/dhclient-script
+++ b/modules.d/40network/dhclient-script
@@ -20,15 +20,17 @@ setup_interface() {
     # disallow MTUs from 576 and below by default, so that broken
     # MTUs are ignored, but higher stuff is allowed (1492, 1500, etc).
     if [ -n "$mtu" ] && [ $mtu -gt 576 ] ; then
-	echo "if ! ip link set $netif mtu $mtu ; then"
-	echo "ip link set $netif down"
-	echo "ip link set $netif mtu $mtu"
-	echo "ip link set $netif up"
-	echo wait_for_if_up $netif
-	echo "fi"
-    fi > /tmp/net.$netif.up
+	if ! ip link set $netif mtu $mtu ; then
+            ip link set $netif down
+	    ip link set $netif mtu $mtu
+	    ip link set $netif up
+	    wait_for_if_up $netif
+	fi
+    fi
+
+    ip addr add $ip${mask:+/$mask} ${bcast:+broadcast $bcast} dev $netif
 
-    echo ip addr add $ip${mask:+/$mask} ${bcast:+broadcast $bcast} dev $netif >> /tmp/net.$netif.up
+    > /tmp/net.$netif.up  
 
     [ -n "$gw" ] && echo ip route add default via $gw dev $netif > /tmp/net.$netif.gw
 
@@ -51,9 +53,6 @@ exec >>/dev/initlog.pipe 2>>/dev/initlog.pipe
 # We already need a set netif here
 netif=$interface
 
-# Huh? Interface configured?
-[ -f "/tmp/net.$netif.up" ] && exit 0
-
 case $reason in
     PREINIT)
 	echo "dhcp: PREINIT $netif up"
diff --git a/modules.d/40network/ifup b/modules.d/40network/ifup
index ebdaa3c..7783263 100755
--- a/modules.d/40network/ifup
+++ b/modules.d/40network/ifup
@@ -12,9 +12,9 @@ do_dhcp() {
     # /sbin/dhclient-script will mark the netif up and generate the online
     # event for nfsroot
     # XXX add -V vendor class and option parsing per kernel
-    echo "Starting dhcp for interface $netif"
-    dhclient "$@" -1 -q -cf /etc/dhclient.conf -pf /tmp/dhclient.$netif.pid -lf /tmp/dhclient.$netif.lease $netif \
-    || echo "dhcp failed"
+    #echo "Starting dhcp for interface $netif"
+    dhclient "$@" -1 -q -cf /etc/dhclient.conf -pf /tmp/dhclient.$netif.pid -lf /tmp/dhclient.$netif.lease $netif &
+    #|| echo "dhcp failed"
 }
 
 load_ipv6() {
@@ -33,9 +33,10 @@ do_ipv6auto() {
         echo 0 > /proc/sys/net/ipv6/conf/$netif/forwarding 
         echo 1 > /proc/sys/net/ipv6/conf/$netif/accept_ra
         echo 1 > /proc/sys/net/ipv6/conf/$netif/accept_redirects
-	echo ip link set $netif up 
-	echo wait_for_if_up $netif
-    } > /tmp/net.$netif.up
+	ip link set $netif up 
+	wait_for_if_up $netif
+    } 
+    > /tmp/net.$netif.up
 
     [ -n "$hostname" ] && echo "echo $hostname > /proc/sys/kernel/hostname" > /tmp/net.$netif.hostname
 
@@ -56,13 +57,14 @@ do_static() {
     strstr $ip '*:*:*' && load_ipv6
 
     {
-	echo ip link set $netif up 
-	echo wait_for_if_up $netif
+	ip link set $netif up 
+	wait_for_if_up $netif
 	# do not flush addr for ipv6
-	strstr $ip '*:*:*' || \
-	    echo ip addr flush dev $netif
-	echo ip addr add $ip/$mask dev $netif
-    } > /tmp/net.$netif.up
+	#strstr $ip '*:*:*' || \
+	#    ip addr flush dev $netif
+	ip addr add $ip/$mask dev $netif
+    } 
+    > /tmp/net.$netif.up
 
     [ -n "$gw" ] && echo ip route add default via $gw dev $netif > /tmp/net.$netif.gw
     [ -n "$hostname" ] && echo "echo $hostname > /proc/sys/kernel/hostname" > /tmp/net.$netif.hostname
@@ -151,16 +153,23 @@ for p in $(getargs ip=); do
 	eval '[ "$'$i'" ] && echo '$i'="$'$i'"'
     done > /tmp/net.$netif.override
 
-    case $autoconf in
-	dhcp|on|any)
-	    do_dhcp -4 ;;
-	dhcp6)
-	    do_dhcp -6 ;;
-	auto6)
-	    do_ipv6auto ;;
-        *) 
-	    do_static ;;
-    esac
+    OLDIFS="$IFS"
+    IFS=,
+    set -- $autoconf
+    IFS="$OLDIFS"
+
+    for autoconf in "$@"; do
+	case $autoconf in
+	    dhcp|on|any)
+		do_dhcp -4 ;;
+	    dhcp6)
+		do_dhcp -6 ;;
+	    auto6)
+		do_ipv6auto ;;
+            *) 
+		do_static ;;
+	esac
+    done
     break
 done
 
diff --git a/modules.d/40network/net-genrules.sh b/modules.d/40network/net-genrules.sh
index 1d6d604..b435e7c 100755
--- a/modules.d/40network/net-genrules.sh
+++ b/modules.d/40network/net-genrules.sh
@@ -28,17 +28,17 @@ fix_bootif() {
     BOOTIF=$(getarg 'BOOTIF=')
     if [ -n "$BOOTIF" ] ; then
 	BOOTIF=$(fix_bootif "$BOOTIF")
-	printf 'ACTION=="add", SUBSYSTEM=="net", ATTR{address}=="%s", RUN+="/sbin/ifup $env{INTERFACE}"\n' "$BOOTIF"
+	printf 'ACTION=="add", SUBSYSTEM=="net", ATTR{address}=="%s", RUN+="/sbin/initqueue --onetime --unique --name ifup-$env{INTERFACE} /sbin/ifup $env{INTERFACE}"\n' "$BOOTIF"
 
     # If we have to handle multiple interfaces, handle only them.
     elif [ -n "$IFACES" ] ; then
 	for iface in $IFACES ; do
-	    printf 'SUBSYSTEM=="net", ENV{INTERFACE}=="%s", RUN+="/sbin/ifup $env{INTERFACE}"\n' "$iface"
+	    printf 'SUBSYSTEM=="net", ENV{INTERFACE}=="%s", RUN+="/sbin/initqueue --onetime --unique --name ifup-$env{INTERFACE} /sbin/ifup $env{INTERFACE}"\n' "$iface"
 	done
 
     # Default: We don't know the interface to use, handle all
     else
-	printf 'SUBSYSTEM=="net", ENV{INTERFACE}=="?*", RUN+="/sbin/ifup $env{INTERFACE}"\n'
+	printf 'SUBSYSTEM=="net", ENV{INTERFACE}=="?*", RUN+="/sbin/initqueue --onetime --unique --name ifup-$env{INTERFACE} /sbin/ifup $env{INTERFACE}"\n'
     fi
 
 } > /etc/udev/rules.d/60-net.rules
diff --git a/modules.d/40network/netroot b/modules.d/40network/netroot
index 6a24d41..eeb1227 100755
--- a/modules.d/40network/netroot
+++ b/modules.d/40network/netroot
@@ -7,9 +7,6 @@ PATH=$PATH:/sbin:/usr/sbin
 # Huh? Empty $1?
 [ -z "$1" ] && exit 1
 
-# Huh? No interface config?
-[ ! -e /tmp/net.$1.up ] && exit 1
-
 # There's no sense in doing something if no (net)root info is available
 # or root is already there
 [ -e /tmp/root.info ] || exit 1
@@ -69,9 +66,6 @@ fi
 
 # We're here, so we can assume that upping interfaces is now ok
 [ -z "$IFACES" ] && IFACES="$netif"
-for iface in $IFACES ; do
-    . /tmp/net.$iface.up
-done
 
 [ -e /tmp/net.$netif.gw ]          && . /tmp/net.$netif.gw
 [ -e /tmp/net.$netif.hostname ]    && . /tmp/net.$netif.hostname
@@ -96,9 +90,7 @@ if [ -z "$dest" ] ; then
        [0-9]*\.[0-9]*\.[0-9]*\.[0-9]*) dest=$dummy;;
     esac
 fi
-if [ -n "$dest" ] && ! arping -q -f -w 60 -I $netif $dest ; then
-    die "Resolving $dest via ARP on $netif failed"
-fi
+[ -n "$dest" ] && arping -q -f -w 60 -I $netif $dest
 
 # Source netroot hooks before we start the handler
 source_all netroot
@@ -113,15 +105,15 @@ if $handler $netif $netroot $NEWROOT; then
     done
 
     # Save used netif for later use
-    [ ! -f /tmp/net.ifaces ] && echo $netif > /tmp/net.ifaces
-else 
-    warn "Mounting root via '$netif' failed"
+    echo $netif >> /tmp/net.ifaces
+#else 
+#    warn "Mounting root via '$netif' failed"
     # If we're trying with multiple interfaces, put that one down.
     # ip down/flush ensures that routeing info goes away as well
-    if [ -z "$BOOTDEV" ] ; then
-	ip link set $netif down
-	ip addr flush dev $netif
-	echo "#empty" > /etc/resolv.conf
-    fi
+#    if [ -z "$BOOTDEV" ] ; then
+#	ip link set $netif down
+#	ip addr flush dev $netif
+#	echo "#empty" > /etc/resolv.conf
+#    fi
 fi
 exit 0
diff --git a/modules.d/40network/parse-ip-opts.sh b/modules.d/40network/parse-ip-opts.sh
index 9f6d9f3..7af44b9 100755
--- a/modules.d/40network/parse-ip-opts.sh
+++ b/modules.d/40network/parse-ip-opts.sh
@@ -107,32 +107,38 @@ for p in $(getargs ip=); do
 	warn "Empty autoconf values default to dhcp"
 	autoconf="dhcp"
     fi
-
-    # Error checking for autoconf in combination with other values
-    case $autoconf in
-	error) die "Error parsing option 'ip=$p'";;
-	bootp|rarp|both) die "Sorry, ip=$autoconf is currenty unsupported";;
-	none|off) \
-	    [ -z "$ip" ] && \
+    OLDIFS="$IFS"
+    IFS=,
+    set -- $autoconf
+    IFS="$OLDIFS"
+    for autoconf in "$@"; do
+        # Error checking for autoconf in combination with other values
+        case $autoconf in
+	    error) die "Error parsing option 'ip=$p'";;
+	    bootp|rarp|both) die "Sorry, ip=$autoconf is currenty unsupported";;
+	    none|off) \
+	        [ -z "$ip" ] && \
 		die "For argument 'ip=$p'\nValue '$autoconf' without static configuration does not make sense"
-	    [ -z "$mask" ] && \
-		die "Sorry, automatic calculation of netmask is not yet supported"
-	    ;;
-	auto6);;
-	dhcp|dhcp6|on|any) \
-	    [ -n "$NEEDBOOTDEV" ] && [ -z "$dev" ] && \
+	        [ -z "$mask" ] && \
+		    die "Sorry, automatic calculation of netmask is not yet supported"
+	        ;;
+	    auto6);;
+	    dhcp|dhcp6|on|any) \
+	        [ -n "$NEEDBOOTDEV" ] && [ -z "$dev" ] && \
 	        die "Sorry, 'ip=$p' does not make sense for multiple interface configurations"
-	    [ -n "$ip" ] && \
-		die "For argument 'ip=$p'\nSorry, setting client-ip does not make sense for '$autoconf'"
-	    ;;
-	*) die "For argument 'ip=$p'\nSorry, unknown value '$autoconf'";;
-    esac
+	        [ -n "$ip" ] && \
+		    die "For argument 'ip=$p'\nSorry, setting client-ip does not make sense for '$autoconf'"
+	        ;;
+	    *) die "For argument 'ip=$p'\nSorry, unknown value '$autoconf'";;
+        esac
+        _part=${_part%,*}
+    done
 
     if [ -n "$dev" ] ; then
         # We don't like duplicate device configs
 	if [ -n "$IFACES" ] ; then
 	    for i in $IFACES ; do
-		[ "$dev" = "$i" ] && die "For argument 'ip=$p'\nDuplication configurations for '$dev'"
+		[ "$dev" = "$i" ] && warn "For argument 'ip=$p'\nDuplication configurations for '$dev'"
 	    done
 	fi
 	# IFACES list for later use
diff --git a/modules.d/99base/init b/modules.d/99base/init
index 7e83dfc..1306d21 100755
--- a/modules.d/99base/init
+++ b/modules.d/99base/init
@@ -318,7 +318,7 @@ fi
 
 # Debug: Copy state
 if getarg rdcopystate; then
-    mkdir /dev/.initramfs/
+    [ -d /dev/.initramfs/ ] || mkdir /dev/.initramfs/
     cp /tmp/* /dev/.initramfs/ >/dev/null 2>&1
 fi
 
diff --git a/test/TEST-50-MULTINIC/test.sh b/test/TEST-50-MULTINIC/test.sh
index ab96987..5bfdb75 100755
--- a/test/TEST-50-MULTINIC/test.sh
+++ b/test/TEST-50-MULTINIC/test.sh
@@ -4,7 +4,7 @@ TEST_DESCRIPTION="root filesystem on NFS with multiple nics"
 KVERSION=${KVERSION-$(uname -r)}
 
 # Uncomment this to debug failures
-#DEBUGFAIL="rdshell"
+#DEBUGFAIL="rdshell rdbreak"
 #SERIAL="udp:127.0.0.1:9999"
 SERIAL="null"
 
@@ -101,6 +101,16 @@ test_run() {
 	"root=nfs:192.168.50.1:/nfs/client ip=dhcp" \
 	"eth1" || return 1
 
+    client_test "MULTINIC root=nfs ip=auto6,dhcp" \
+	FF 00 FE \
+	"root=nfs:192.168.50.1:/nfs/client ip=auto6,dhcp" \
+	"eth1" || return 1
+
+    client_test "MULTINIC root=nfs ip=dhcp,auto" \
+	FF 00 FE \
+	"root=nfs:192.168.50.1:/nfs/client ip=dhcp,auto6" \
+	"eth1" || return 1
+
     # Require two interfaces
     client_test "MULTINIC root=nfs ip=eth1:dhcp ip=eth2:dhcp bootdev=eth1" \
 	00 01 02 \
